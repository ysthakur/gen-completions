{"name":"git","flags":[{"forms":["-v","--version"],"desc":"Prints the Git suite version that the git program came from. This option is i..."},{"forms":["-h","--help"],"desc":"Prints the synopsis and a list of the most commonly used commands. If the opt..."},{"forms":["-C"],"desc":"Run as if git was started in <path> instead of the current working directory...."},{"forms":["-c"],"desc":"Pass a configuration parameter to the command. The value given will override ..."},{"forms":["--config-env"],"desc":"Like -c <name>=<value>, give configuration variable <name> a value, where <en..."},{"forms":["--exec-path"],"desc":"Path to wherever your core Git programs are installed. This can also be contr..."},{"forms":["--html-path"],"desc":"Print the path, without trailing slash, where Git's HTML documentation is ins..."},{"forms":["--man-path"],"desc":"Print the manpath (see man(1)) for the man pages for this version of Git and ..."},{"forms":["--info-path"],"desc":"Print the path where the Info files documenting this version of Git are insta..."},{"forms":["-p","--paginate"],"desc":"Pipe all output into less (or if set, $PAGER) if standard output is a termina..."},{"forms":["-P","--no-pager"],"desc":"Do not pipe Git output into a pager"},{"forms":["--git-dir"],"desc":"Set the path to the repository (\".git\" directory). This can also be controlle..."},{"forms":["--work-tree"],"desc":"Set the path to the working tree. It can be an absolute path or a path relati..."},{"forms":["--namespace"],"desc":"Set the Git namespace. See gitnamespaces(7) for more details. Equivalent to s..."},{"forms":["--bare"],"desc":"Treat the repository as a bare repository. If GIT_DIR environment is not set,..."},{"forms":["--no-replace-objects"],"desc":"Do not use replacement refs to replace Git objects. See git-replace(1) for mo..."},{"forms":["--literal-pathspecs"],"desc":"Treat pathspecs literally (i.e. no globbing, no pathspec magic). This is equi..."},{"forms":["--glob-pathspecs"],"desc":"Add \"glob\" magic to all pathspec. This is equivalent to setting the GIT_GLOB_..."},{"forms":["--noglob-pathspecs"],"desc":"Add \"literal\" magic to all pathspec. This is equivalent to setting the GIT_NO..."},{"forms":["--icase-pathspecs"],"desc":"Add \"icase\" magic to all pathspec. This is equivalent to setting the GIT_ICAS..."},{"forms":["--no-optional-locks"],"desc":"Do not perform optional operations that require locks. This is equivalent to ..."},{"forms":["--list-cmds"],"desc":"List commands by group. This is an internal/experimental option and may chang..."},{"forms":["--attr-source"],"desc":"Read gitattributes from <tree-ish> instead of the worktree. See gitattributes..."}],"subcommands":[{"name":"log","flags":[{"forms":["--follow"],"desc":"Continue listing the history of a file beyond renames (works only for a singl..."},{"forms":["--no-decorate","--decorate"],"desc":"Print out the ref names of any commits that are shown. If short is specified,..."},{"forms":["--decorate-refs","--decorate-refs-exclude"],"desc":"For each candidate reference, do not use it for decoration if it matches any ..."},{"forms":["--clear-decorations"],"desc":"When specified, this option clears all previous --decorate-refs or --decorate..."},{"forms":["--source"],"desc":"Print out the ref name given on the command line by which each commit was rea..."},{"forms":["--mailmap","--use-mailmap"],"desc":"Use mailmap file to map author and committer names and email addresses to can..."},{"forms":["--full-diff"],"desc":"Without this flag, git log -p <path>... shows commits that touch the specifie..."},{"forms":["--log-size"],"desc":"Include a line 'log size <number>' in the output for each commit, where <numb..."},{"forms":["-L","-L"],"desc":"Trace the evolution of the line range given by <start>,<end>, or by the funct..."},{"forms":["-n","--max-count"],"desc":"Limit the number of commits to output"},{"forms":["--skip"],"desc":"Skip number commits before starting to show the commit output"},{"forms":["--since","--after"],"desc":"Show commits more recent than a specific date"},{"forms":["--since-as-filter"],"desc":"Show all commits more recent than a specific date. This visits all commits in..."},{"forms":["--until","--before"],"desc":"Show commits older than a specific date"},{"forms":["--author","--committer"],"desc":"Limit the commits output to ones with author/committer header lines that matc..."},{"forms":["--grep-reflog"],"desc":"Limit the commits output to ones with reflog entries that match the specified..."},{"forms":["--grep"],"desc":"Limit the commits output to ones with log message that matches the specified ..."},{"forms":["--all-match"],"desc":"Limit the commits output to ones that match all given --grep, instead of ones..."},{"forms":["--invert-grep"],"desc":"Limit the commits output to ones with log message that do not match the patte..."},{"forms":["-i","--regexp-ignore-case"],"desc":"Match the regular expression limiting patterns without regard to letter case"},{"forms":["--basic-regexp"],"desc":"Consider the limiting patterns to be basic regular expressions; this is the d..."},{"forms":["-E","--extended-regexp"],"desc":"Consider the limiting patterns to be extended regular expressions instead of ..."},{"forms":["-F","--fixed-strings"],"desc":"Consider the limiting patterns to be fixed strings (don't interpret pattern a..."},{"forms":["-P","--perl-regexp"],"desc":"Consider the limiting patterns to be Perl-compatible regular expressions. Sup..."},{"forms":["--remove-empty"],"desc":"Stop when a given path disappears from the tree"},{"forms":["--merges"],"desc":"Print only merge commits. This is exactly the same as --min-parents=2"},{"forms":["--no-merges"],"desc":"Do not print commits with more than one parent. This is exactly the same as -..."},{"forms":["--min-parents","--max-parents","--no-min-parents","--no-max-parents"],"desc":"Show only commits which have at least (or at most) that many parent commits. ..."},{"forms":["--first-parent"],"desc":"When finding commits to include, follow only the first parent commit upon see..."},{"forms":["--exclude-first-parent-only"],"desc":"When finding commits to exclude (with a ^), follow only the first parent comm..."},{"forms":["--not"],"desc":"Reverses the meaning of the ^ prefix (or lack thereof) for all following revi..."},{"forms":["--all"],"desc":"Pretend as if all the refs in refs/, along with HEAD, are listed on the comma..."},{"forms":["--branches"],"desc":"Pretend as if all the refs in refs/heads are listed on the command line as <c..."},{"forms":["--tags"],"desc":"Pretend as if all the refs in refs/tags are listed on the command line as <co..."},{"forms":["--remotes"],"desc":"Pretend as if all the refs in refs/remotes are listed on the command line as ..."},{"forms":["--glob"],"desc":"Pretend as if all the refs matching shell glob <glob-pattern> are listed on t..."},{"forms":["--exclude"],"desc":"Do not include refs matching <glob-pattern> that the next --all, --branches, ..."},{"forms":["--exclude-hidden"],"desc":"Do not include refs that would be hidden by git-fetch, git-receive-pack or gi..."},{"forms":["--reflog"],"desc":"Pretend as if all objects mentioned by reflogs are listed on the command line..."},{"forms":["--alternate-refs"],"desc":"Pretend as if all objects mentioned as ref tips of alternate repositories wer..."},{"forms":["--single-worktree"],"desc":"By default, all working trees will be examined by the following options when ..."},{"forms":["--ignore-missing"],"desc":"Upon seeing an invalid object name in the input, pretend as if the bad input ..."},{"forms":["--bisect"],"desc":"Pretend as if the bad bisection ref refs/bisect/bad was listed and as if it w..."},{"forms":["--stdin"],"desc":"In addition to the <commit> listed on the command line, read them from the st..."},{"forms":["--cherry-mark"],"desc":"Like --cherry-pick (see below) but mark equivalent commits with = rather than..."},{"forms":["--cherry-pick"],"desc":"Omit any commit that introduces the same change as another commit on the 'oth..."},{"forms":["--left-only","--right-only"],"desc":"List only commits on the respective side of a symmetric difference, i.e. only..."},{"forms":["--cherry"],"desc":"A synonym for --right-only --cherry-mark --no-merges; useful to limit the out..."},{"forms":["-g","--walk-reflogs"],"desc":"Instead of walking the commit ancestry chain, walk reflog entries from the mo..."},{"forms":["--merge"],"desc":"After a failed merge, show refs that touch files having a conflict and don't ..."},{"forms":["--boundary"],"desc":"Output excluded boundary commits. Boundary commits are prefixed with -"},{"forms":["--simplify-by-decoration"],"desc":"Commits that are referred by some branch or tag are selected"},{"forms":["--show-pulls"],"desc":"Include all commits from the default mode, but also any merge commits that ar..."},{"forms":["--full-history"],"desc":"Same as the default mode, but does not prune some history"},{"forms":["--dense"],"desc":"Only the selected commits are shown, plus some to have a meaningful history"},{"forms":["--sparse"],"desc":"All commits in the simplified history are shown"},{"forms":["--simplify-merges"],"desc":"Additional option to --full-history to remove some needless merges from the r..."},{"forms":["--ancestry-path"],"desc":"When given a range of commits to display (e.g. commit1..commit2 or commit2 ^c..."},{"forms":["--full-history"],"desc":"This mode differs from the default in one point: always follow all parents of..."},{"forms":["--full-history"],"desc":"Ordinary commits are only included if they are !TREESAME (though this can be ..."},{"forms":["--dense"],"desc":"Commits that are walked are included if they are not TREESAME to any parent"},{"forms":["--sparse"],"desc":"All commits that are walked are included. Note that without --full-history, t..."},{"forms":["--simplify-merges"],"desc":"First, build a history graph in the same way that --full-history with parent ..."},{"forms":["--ancestry-path"],"desc":"Limit the displayed commits to those which are an ancestor of <commit>, or wh..."},{"forms":["--show-pulls"],"desc":"In addition to the commits shown in the default history, show each merge comm..."},{"forms":["--date-order"],"desc":"Show no parents before all of its children are shown, but otherwise show comm..."},{"forms":["--author-date-order"],"desc":"Show no parents before all of its children are shown, but otherwise show comm..."},{"forms":["--topo-order"],"desc":"Show no parents before all of its children are shown, and avoid showing commi..."},{"forms":["--reverse"],"desc":"Output the commits chosen to be shown (see Commit Limiting section above) in ..."},{"forms":["--no-walk"],"desc":"Only show the given commits, but do not traverse their ancestors. This has no..."},{"forms":["--do-walk"],"desc":"Overrides a previous --no-walk"},{"forms":["--pretty","--format"],"desc":"Pretty-print the contents of the commit logs in a given format, where <format..."},{"forms":["--abbrev-commit"],"desc":"Instead of showing the full 40-byte hexadecimal commit object name, show a pr..."},{"forms":["--no-abbrev-commit"],"desc":"Show the full 40-byte hexadecimal commit object name. This negates --abbrev-c..."},{"forms":["--oneline"],"desc":"This is a shorthand for \"--pretty=oneline --abbrev-commit\" used together"},{"forms":["--encoding"],"desc":"Commit objects record the character encoding used for the log message in thei..."},{"forms":["--expand-tabs","--expand-tabs","--no-expand-tabs"],"desc":"Perform a tab expansion (replace each tab with enough spaces to fill to the n..."},{"forms":["--notes"],"desc":"Show the notes (see git-notes(1)) that annotate the commit, when showing the ..."},{"forms":["--no-notes"],"desc":"Do not show notes. This negates the above --notes option, by resetting the li..."},{"forms":["--show-notes","--standard-notes"],"desc":"These options are deprecated. Use the above --notes/--no-notes options instead"},{"forms":["--show-signature"],"desc":"Check the validity of a signed commit object by passing the signature to gpg ..."},{"forms":["--relative-date"],"desc":"Synonym for --date=relative"},{"forms":["--date"],"desc":"Only takes effect for dates shown in human-readable format, such as when usin..."},{"forms":["--parents"],"desc":"Print also the parents of the commit (in the form \"commit parent...\"). Also e..."},{"forms":["--children"],"desc":"Print also the children of the commit (in the form \"commit child...\"). Also e..."},{"forms":["--left-right"],"desc":"Mark which side of a symmetric difference a commit is reachable from. Commits..."},{"forms":["--graph"],"desc":"Draw a text-based graphical representation of the commit history on the left ..."},{"forms":["--show-linear-break"],"desc":"When --graph is not used, all history branches are flattened which can make i..."}]}]}